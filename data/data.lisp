(in-package :data)

(defprim remote (name schema url)
  (:pretty () (list 'remote (list :name name :schema (synth :pretty schema) :url (synth :pretty url))))
  (:req ()  (seq
             (normal "Sorgente dati remota identificata come ~a"
                     (string-downcase name))
             (normal ", istanza dello schema dati ~a " (lower-camel (synth :name schema)))
             (normal "e popolata al caricamento dell'elemento tramite richiesta HTTP GET verso l'URL ")
             (verbatim (doc (synth :url url)))))
  (:template () ())
  (:controller () (ts-method (doc:text "get~a" (upper-camel name))
                             nil
                             (ts-template-type 'observable (ts-array-type (ts-primitive-type 'any)))
                             (ts-return (ts-chain (ts-dynamic 'this)
                                                  (ts-dynamic 'http)
                                                  (ts-call 'get (ts-const (synth :string (synth :url url))))
                                                  (ts-call 'map (ts-arrow (list (ts-pair 'res (ts-object-type 'response)))
                                                                          (ts-chain (ts-dynamic 'res)
                                                                                    (ts-call 'json))))
                                                  (ts-call 'catch (ts-arrow (list (ts-pair 'error (ts-primitive-type 'any)))
                                                                            (ts-chain (ts-static 'observable)
                                                                                      (ts-call 'throw (ts-const "error")))))))))
  (:components (*) nil)
  (:ts-imports () (apply #'list (ts-import "@angular/http" 'http 'response)
                         (ts-import "rxjs/Rx" 'observable)
                         (ts-import "rxjs/add/operator/map")
                         (ts-import "rxjs/add/operator/catch")
                         (synth :ts-imports schema)
                         ;; (ts-import (mkstr "./" (string-downcase (synth :name schema))) (synth :name schema))
                         ))
  (:dependencies () (list (ts-pair 'http (ts-object-type 'http) :private t))))

(defprim rand (name schema)
  (:pretty () (list 'rand (list :name name :schema (synth :pretty schema))))
  (:req ()  (seq
             (normal "Sorgente dati identificata come ~a"
                     (string-downcase name))
              (normal ", istanza dello schema dati ~a " (lower-camel (synth :name schema)))
              (normal "e popolata al caricamento dell'elemento tramite generazione casuale")))
  (:template () ())
  (:controller () (ts-pair name (ts-primitive-type 'any) :init (synth :ts-implementation (synth :random schema))))
  (:components (*) nil)
  (:ts-imports () (synth :ts-imports schema)
                     ;; (ts-import (mkstr "./" (string-downcase (synth :name schema))) (synth :name schema))
                     )
  (:dependencies () nil))

(defprim with-data% (bindings element)
  (:pretty () (list 'with-data (list :bindings (synth-all :pretty bindings) :element (synth :pretty element))))
  (:req (path namelist) (seq (normal "Tale elemento fa uso delle seguenti sorgenti dati:")
                    (apply #'itemize (synth-all :req bindings)) 
                    (synth :req element path namelist)))
  (:brief (path namelist) (synth :brief element path namelist))
  (:reqlist (path namelist) (synth :reqlist element path namelist))
  (:template () (synth :template element))
  (:controller () (ts-concat (synth-all :controller bindings) ))
  (:components (*) nil)
  (:routes (path) nil)
  (:ts-imports () (apply #'append (synth :ts-imports element) (synth-all :ts-imports bindings)))
  (:dependencies () (apply #'append (synth :dependencies element) (synth-all :dependencies bindings))))


(defmacro with-data (binds &body element)
  `(let* ,(mapcar #'(lambda (bind)
		      (destructuring-bind (name source) bind
			`(,name ,source)))
		  binds)
     (with-data% (list ,@(mapcar #'car binds)) ,@element)))

