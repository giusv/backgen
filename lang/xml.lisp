(in-package :xml)

(defprim node (name &rest args)
  (:pretty () (list name (list :attributes
                               (synth-plist-merge (lambda (pair)
                                                    (labels ((stringify (item)
                                                               (if (or (numberp item) (stringp item) (keywordp item) (symbolp item))
                                                                   item
                                                                   (synth :string item))))
                                                      (list (car pair) (stringify (cadr pair)))))
                                                  (rest-key args))
                               :body (synth-all :pretty (apply #'append* (rest-plain args))))))
  (:doc () (labels ((stringify (item)
                      (if (or (numberp item) (stringp item) (keywordp item) (symbolp item))
                          item
                          (synth :string item)))
                    (open-tag (as) (doc:text "<~a~{ ~a=\"~a\"~}>" name (mapcar #'stringify as)))
                    (close-tag () (doc:text "</~a>" name))
                    (open-close-tag (as) (doc:text "<~a~{ ~a=\"~a\"~}/>" name (mapcar #'stringify as))))
             (let ((attributes (rest-key args)) 
                   (body (apply #'append* (rest-plain args))))
               (if (null body)
                   (open-close-tag attributes)
                   (doc:vcat (open-tag attributes)
                             (doc:nest 4 (apply #'doc:vcat (synth-all :doc body)))
                             (close-tag)))))))
(defprim simple (string)
  (:pretty () (list 'simple (list :string string)))
  (:doc () (doc:text string)))
