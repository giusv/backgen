(in-package :backgen)
(defun uniq (&rest inds)
  ;; (read-from-string (apply #'mkstr inds))
  (loop for i from 0 to (- (length inds) 1) 
     summing (* (expt 10000 (- (length inds) i 1)) (nth i inds)) into result 
     ;; summing (nth i inds) into result 
     finally (return result)))

;; (defmacro bool-entry (n fname name val)
;;   `(tl-forall i (tl-range ,n ,n)
;;      (tl-exists (entry stdlib-entries)
;;          (:stdlib-entry-id ,n :name ,(format nil "~a" (lower fname "")) :type "boolean" :body ,(format nil "function ~a(soggetto,sinistro,strict) {if (strict) { return \"(~a = ''~a'')\"; } else { return \"(~a = ''~a'' OR ~a IS NULL)\"; }}" (lower fname "") (upper name) (lower val) (upper name) (lower val) (upper name)))
;;        (tl-exists (par stdlib-entry-parameters) (:stdlib-entry-parameter-id (uniq i 1) :stdlib-entry-id ,n :name "soggetto" :type "soggetto"))
;;        (tl-exists (par stdlib-entry-parameters) (:stdlib-entry-parameter-id (uniq i 2) :stdlib-entry-id ,n :name "sinistro" :type "string")))))

;; (defmacro op-entry (n fname op)
;;   `(tl-forall i (tl-range ,n ,n)
;;      (tl-exists (entry stdlib-entries)
;;          (:stdlib-entry-id ,n :name  ,(format nil "~a" (lower fname "")) :type "string" :body,(format nil "function ~a(op1,op2,strict)
;; {if (strict) { return \"(\" + op1 + \" ~a \" + op2 + \"); } else { return \"((\" + op1 + \" ~a \" + op2 + \") OR (\" + op1 + \"IS NULL) OR (\" + op2 + \"IS NULL))\"; }}" (lower fname "") op op))

;;        (tl-exists (par stdlib-entry-parameters)
;;            (:stdlib-entry-parameter-id (uniq i 1) :stdlib-entry-id ,n :name "op1" :type "null"))
;;        (tl-exists (par stdlib-entry-parameters) (:stdlib-entry-parameter-id (uniq i 2) :stdlib-entry-id ,n :name "op2" :type "null")))))


(eval-when (:compile-toplevel :load-toplevel :execute)
  (defun tl-oneof (values)
    (nth (random (length values)) values)))


(eval-when (:compile-toplevel :load-toplevel :execute)
  (defun tl-someof (flags n val)
    (if (eql n 0)
        nil 
        (let ((flag (tl-oneof flags)))
          (apply #'list flag val (tl-someof (remove flag flags) (- n 1) val))))))

(defun sco1 (&key id days occurrences (date (get-universal-time)) (flag :d-flg-respons) (null 0))
  (let ((occurrences (- occurrences 1)))
    (labels ((sini (start end &optional val)
               (tl-forall i (tl-range start end)
                 (tl-exists (sini gv-ind-stat-sini) 
                     (:id-sini (uniq id i) :d-data-accad (tl-random-timestamp (- date (* days 86400)) date))
                   (tl-exists (sogg gv-ind-stat-sogg-sini) 
                       (:id-sini (tl-retrieve :id-sini sini) :id-sogg id flag val)))))) 
      (tl-exists (sini gv-ind-stat-sini) 
          (:id-sini id :d-data-accad (tl-timestamp date))
        (tl-exists (sogg gv-ind-stat-sogg-sini) 
            (:id-sini id :id-sogg id flag "1"))
        (sini 1 (- occurrences null) "1")
        (sini (1+ (- occurrences null)) occurrences)))))

(defun sco2 (&key id days occurrences (date (get-universal-time)) (flag :d-flg-respons) (null 0))
  (sco1 :id id :days days :occurrences occurrences :date date :flag flag :null null))

(defun sco3 (&key id days occurrences interval threshold (date (get-universal-time)) (flag :d-flg-respons) (null 0))
  (let ((occurrences (- occurrences 1)))
    (labels ((sini (start end &optional val)
               (tl-forall i (tl-range start end)
                 (tl-exists (sini gv-ind-stat-sini) 
                     (:id-sini (uniq id i) :d-data-accad (tl-random-timestamp (- date (* days 86400)) date) :m-num-lesi threshold)
                   (tl-exists (sogg gv-ind-stat-sogg-sini) 
                       (:id-sini (tl-retrieve :id-sini sini) :id-sogg id flag val)))))) 
      (tl-exists (sini gv-ind-stat-sini) 
          (:id-sini id :d-data-accad (tl-timestamp date) :m-num-lesi threshold)
        (tl-exists (sogg gv-ind-stat-sogg-sini) 
            (:id-sini id :id-sogg id flag "1"))
        (sini 1 (- occurrences null) "1")
        (sini (1+ (- occurrences null)) occurrences)))))

(defun sco4 (&key id days occurrences delay interval (date (get-universal-time)) (flag :d-flg-respons) (null 0))
  (let ((occurrences (- occurrences 1)))
    (labels ((sini (start end &optional val)
               (tl-forall i (tl-range start end)
                 (let* ((data-accad (- date (* i (/ days occurrences) 86400)))
                        (data-denun (+ data-accad (* delay 86400)))) 
                   (tl-exists (sini gv-ind-stat-sini) 
                       (:id-sini (uniq id i) :d-data-accad (tl-timestamp data-accad)
                                 :d-data-denun (tl-timestamp data-denun))
                     (tl-exists (sogg gv-ind-stat-sogg-sini) 
                         (:id-sini (tl-retrieve :id-sini sini) :id-sogg id flag val))))))) 
      (tl-exists (sini gv-ind-stat-sini) 
          (:id-sini id :d-data-accad (tl-timestamp date) :d-data-denun (tl-timestamp (+ date (* delay 86400))))
        (tl-exists (sogg gv-ind-stat-sogg-sini) 
            (:id-sini id :id-sogg id flag "1"))
        (sini 1 (- occurrences null) "1")
        (sini (1+ (- occurrences null)) occurrences)))))

(defun sco5 (&key id days occurrences delay interval (date (get-universal-time)) (flag :d-flg-respons) (null 0))
  (sco4 :id id :days days :occurrences occurrences :delay delay :interval interval :date date :flag flag :null null))

(defun sco6 (&key id days occurrences (date (get-universal-time)) (null 0))
  (sco1 :id id :days days :occurrences occurrences :date date :flag :d-flg-testimone :null null))

(defun sco7 (&key id (date (get-universal-time)) inv)
  (tl-exists (sini gv-ind-stat-sini) 
          (:id-sini id :d-data-accad (tl-timestamp date))
        (tl-exists (sogg gv-ind-stat-sogg-sini) 
            (:id-sini id :id-sogg id :d-flg-conducente "1" :d-flg-patente-invalida inv))))

(defun sco8 (&key id days occurrences (date (get-universal-time)) (null 0))
  (sco1 :id id :days days :occurrences occurrences :date date :flag :d-flg-leso :null null))


(defun sco9 (&key id days occurrences (date (get-universal-time)) (flag :d-flg-respons) (null 0))
  (let ((occurrences (- occurrences 1)))
    (labels ((sini (start end &optional val)
               (tl-forall i (tl-range start end)
                 (tl-exists (sini gv-ind-stat-sini) 
                     (:id-sini (uniq id i) :d-data-accad (tl-random-timestamp (- date (* days 86400)) date))
                   (tl-exists (sogg gv-ind-stat-sogg-sini) 
                       (:id-sini (tl-retrieve :id-sini sini) :id-sogg id flag val :m-num-rich-fgvs 1)))))) 
      (tl-exists (sini gv-ind-stat-sini) 
          (:id-sini id :d-data-accad (tl-timestamp date))
        (tl-exists (sogg gv-ind-stat-sogg-sini) 
            (:id-sini id :id-sogg id flag "1" :m-num-rich-fgvs 1))
        (sini 1 (- occurrences null) "1")
        (sini (1+ (- occurrences null)) occurrences)))))

(defun sco10 (&key id (date (get-universal-time)) nveic)
  (tl-exists (sini gv-ind-stat-sini) 
          (:id-sini id :d-data-accad (tl-timestamp date))
        (tl-exists (sogg gv-ind-stat-sogg-sini) 
            (:id-sini id :id-sogg id :d-tipo-sogg "p" :d-flg-proprietario "1" :m-num-veic nveic))))

(defun vei1 (&key id days occurrences (date (get-universal-time)))
  (let ((occurrences (- occurrences 1)))
    (labels ((sini (start end &optional val)
               (tl-forall i (tl-range start end)
                 (tl-exists (sini gv-ind-stat-sini) 
                     (:id-sini (uniq id i) :d-data-accad (tl-random-timestamp (- date (* days 86400)) date))
                   (tl-exists (veic gv-ind-stat-trg-veic-sini) 
                       (:id-sini (tl-retrieve :id-sini sini) :id-targa id)))))) 
      (tl-exists (sini gv-ind-stat-sini) 
          (:id-sini id :d-data-accad (tl-timestamp date))
        (tl-exists (veic gv-ind-stat-trg-veic-sini) 
            (:id-sini id :id-targa id))
        (sini 1 occurrences)))))

(defun vei2 (&key id days occurrences (date (get-universal-time)))
  (vei1 :id id :days days :occurrences occurrences :date date))

(defun vei3 (&key id days occurrences threshold (date (get-universal-time)) (null 0))
  (let ((occurrences (- occurrences 1)))
    (labels ((sini (start end &optional val)
               (tl-forall i (tl-range start end)
                 (tl-exists (sini gv-ind-stat-sini) 
                     (:id-sini (uniq id i) :d-data-accad (tl-random-timestamp (- date (* days 86400)) date) :m-num-lesi val)
                   (tl-exists (veic gv-ind-stat-trg-veic-sini) 
                       (:id-sini (tl-retrieve :id-sini sini) :id-targa id)))))) 
      (tl-exists (sini gv-ind-stat-sini) 
          (:id-sini id :d-data-accad (tl-timestamp date) :m-num-lesi threshold)
        (tl-exists (veic gv-ind-stat-trg-veic-sini) 
            (:id-sini id :id-targa id))
        (sini 1 (- occurrences null) threshold)
        (sini (1+ (- occurrences null)) occurrences)))))

(defun vei4 (&key id days occurrences delay interval (date (get-universal-time)) (null 0))
  (let ((occurrences (- occurrences 1)))
    (labels ((sini (start end &optional val)
               (tl-forall i (tl-range start end)
                 (let* ((data-accad (- date (* i (/ days occurrences) 86400)))
                        (data-denun (+ data-accad (* delay 86400)))) 
                   (tl-exists (sini gv-ind-stat-sini) 
                       (:id-sini (uniq id i) :d-data-accad (tl-timestamp data-accad)
                                 :d-data-denun (if val (tl-timestamp data-denun)))
                     (tl-exists (veic gv-ind-stat-trg-veic-sini) 
                         (:id-sini (tl-retrieve :id-sini sini) :id-targa id))))))) 
      (tl-exists (sini gv-ind-stat-sini) 
          (:id-sini id :d-data-accad (tl-timestamp date) :d-data-denun (tl-timestamp (+ date (* delay 86400))))
        (tl-exists (veic gv-ind-stat-trg-veic-sini) 
            (:id-sini id :id-targa id))
        (sini 1 (- occurrences null) t)
        (sini (1+ (- occurrences null)) occurrences)))))

(defun vei5 (&key id days occurrences (date (get-universal-time)) (null 0))
  (let ((occurrences (- occurrences 1)))
    (labels ((sini (start end &optional val)
               (tl-forall i (tl-range start end)
                 (tl-exists (sini gv-ind-stat-sini) 
                     (:id-sini (uniq id i) :d-data-accad (tl-random-timestamp (- date (* days 86400)) date))
                   (tl-exists (veic gv-ind-stat-trg-veic-sini) 
                       (:id-sini (tl-retrieve :id-sini sini) :id-targa id :m-num-rich-fgvs val)))))) 
      (tl-exists (sini gv-ind-stat-sini) 
          (:id-sini id :d-data-accad (tl-timestamp date))
        (tl-exists (veic gv-ind-stat-trg-veic-sini) 
            (:id-sini id :id-targa id :m-num-rich-fgvs 1))
        (sini 1 (- occurrences null) 1)
        (sini (1+ (- occurrences null)) occurrences)))))

(defun vei6 (&key id (date (get-universal-time)) inv)
  (tl-exists (sini gv-ind-stat-sini) 
          (:id-sini id :d-data-accad (tl-timestamp date))
        (tl-exists (veic gv-ind-stat-trg-veic-sini) 
            (:id-sini id :id-targa id :d-flg-targa-incoerente inv))))

(defun vei7 (&key id (date (get-universal-time)) inv)
  (tl-exists (sini gv-ind-stat-sini) 
          (:id-sini id :d-data-accad (tl-timestamp date))
        (tl-exists (veic gv-ind-stat-trg-veic-sini) 
            (:id-sini id :id-targa id :d-flg-targa-inesistente inv))))

(defun vei8 (&key id (date (get-universal-time)) nyears)
  (tl-exists (sini gv-ind-stat-sini) 
      (:id-sini id :d-data-accad (tl-timestamp date))
    (tl-exists (veic gv-ind-stat-trg-veic-sini) 
        (:id-sini id :id-targa id :m-anni-immatr nyears))))

(defun vei9 (&key id days occurrences (date (get-universal-time)) (null 0))
  (let ((occurrences (- occurrences 1)))
    (labels ((sini (start end &optional val)
               (tl-forall i (tl-range start end)
                 (tl-exists (sini gv-ind-stat-sini) 
                     (:id-sini (uniq id i) :d-data-accad (tl-random-timestamp (- date (* days 86400)) date))
                   (tl-exists (veic gv-ind-stat-trg-veic-sini) 
                       (:id-sini (tl-retrieve :id-sini sini) :id-targa id :m-num-incoerenze val)))))) 
      (tl-exists (sini gv-ind-stat-sini) 
          (:id-sini id :d-data-accad (tl-timestamp date))
        (tl-exists (veic gv-ind-stat-trg-veic-sini) 
            (:id-sini id :id-targa id :m-num-incoerenze 1))
        (sini 1 (- occurrences null) 1)
        (sini (1+ (- occurrences null)) occurrences)))))

(defun vei10 (&key id (date (get-universal-time)) frm)
  (tl-exists (sini gv-ind-stat-sini) 
          (:id-sini id :d-data-accad (tl-timestamp date))
        (tl-exists (sogg gv-ind-stat-sogg-sini) 
            (:id-sini id :id-sogg id :d-flg-fermo-admin frm))))

(defun con1 (&key id days occurrences decor scad (date (get-universal-time)) (null 0))
  (let ((occurrences (- occurrences 1)))
    (labels ((sini (start end &optional val)
               (tl-forall i (tl-range start end)
                 (tl-exists (sini gv-ind-stat-sini) 
                     (:id-sini (uniq id i) :d-data-accad (tl-random-timestamp (- date (* days 86400)) date))
                   (tl-exists (sogg gv-ind-stat-sogg-sini) 
                       (:id-sini (tl-retrieve :id-sini sini) :id-sogg id :d-flg-contraente "1" :m-gg-da-decorrenza decor :m-gg-a-scadenza val)))))) 
      (tl-exists (sini gv-ind-stat-sini) 
          (:id-sini id :d-data-accad (tl-timestamp date))
        (tl-exists (sogg gv-ind-stat-sogg-sini) 
            (:id-sini id :id-sogg id :d-flg-contraente "1" :m-gg-da-decorrenza decor :m-gg-a-scadenza scad))
        (sini 1 (- occurrences null) scad)
        (sini (1+ (- occurrences null)) occurrences)))))

(defdb 
  (vei1 :id 1101 :days 180 :occurrences 3)
  (vei1 :id 1102 :days 180 :occurrences 2)

  (vei2 :id 1201 :days 180 :occurrences 3)
  (vei2 :id 1202 :days 180 :occurrences 2)

  (vei3 :id 1301 :days 180 :threshold 3 :occurrences 3)
  (vei3 :id 1302 :days 180 :threshold 3 :occurrences 2)
  (vei3 :id 1303 :days 180 :threshold 3 :occurrences 3 :null 1)

  (vei4 :id 1401 :days 180 :occurrences 3 :delay 10 :interval 180)
  (vei4 :id 1402 :days 180 :occurrences 2 :delay 10 :interval 180)
  (vei4 :id 1403 :days 180 :occurrences 3 :delay 10 :interval 180 :null 1)
  
  (vei5 :id 1501 :days 180 :occurrences 3)
  (vei5 :id 1502 :days 180 :occurrences 2)
  (vei5 :id 1503 :days 180 :occurrences 3 :null 1)

  (vei6 :id 1601 :inv "1")
  (vei6 :id 1602 :inv "0")
  (vei6 :id 1603)
  
  (vei7 :id 1701 :inv "1")
  (vei7 :id 1702 :inv "0")
  (vei7 :id 1703)

  (vei8 :id 1801 :nyears 2)
  (vei8 :id 1802 :nyears 1)
  (vei8 :id 1803)

  (vei9 :id 1901 :days 180 :occurrences 3)
  (vei9 :id 1902 :days 180 :occurrences 2)
  (vei9 :id 1903 :days 180 :occurrences 3 :null 1) 

  (vei10 :id 2001 :frm "1")
  (vei10 :id 2002 :frm "0")
  (vei10 :id 2003)

  (sco1 :id 101 :days 180 :occurrences 3)
  (sco1 :id 102 :days 180 :occurrences 2)
  (sco1 :id 103 :days 180 :occurrences 3 :null 1)

  (sco2 :id 201 :days 180 :occurrences 3)
  (sco2 :id 202 :days 180 :occurrences 2)
  (sco2 :id 203 :days 180 :occurrences 3 :null 1) 

  (sco3 :id 301 :days 180 :occurrences 3 :threshold 3 :interval 180)
  (sco3 :id 302 :days 180 :occurrences 2 :threshold 3 :interval 180)
  (sco3 :id 303 :days 180 :occurrences 3 :threshold 3 :interval 180 :null 1)

  (sco4 :id 401 :days 180 :occurrences 3 :delay 10 :interval 180)
  (sco4 :id 402 :days 180 :occurrences 2 :delay 10 :interval 180)
  (sco4 :id 403 :days 180 :occurrences 3 :delay 10 :interval 180 :null 1)
  
  (sco5 :id 501 :days 180 :occurrences 3 :delay 10 :interval 180)
  (sco5 :id 502 :days 180 :occurrences 2 :delay 10 :interval 180)
  (sco5 :id 503 :days 180 :occurrences 3 :delay 10 :interval 180 :null 1)

  (sco6 :id 601 :days 180 :occurrences 3)
  (sco6 :id 602 :days 180 :occurrences 2)
  (sco6 :id 603 :days 180 :occurrences 3 :null 1)

  (sco7 :id 701 :inv "1")
  (sco7 :id 702 :inv "0")
  (sco7 :id 703)
  
  (sco8 :id 801 :days 180 :occurrences 3)
  (sco8 :id 802 :days 180 :occurrences 2)
  (sco8 :id 803 :days 180 :occurrences 3 :null 1)
  
  (sco9 :id 901 :days 180 :occurrences 3)
  (sco9 :id 902 :days 180 :occurrences 2)
  (sco9 :id 903 :days 180 :occurrences 3 :null 1)

  (sco10 :id 1001 :nveic 2)
  (sco10 :id 1002 :nveic 1)
  (sco10 :id 1003)

  (con1 :id 2101 :days 180 :occurrences 3 :decor 10 :scad 10)
  (con1 :id 2102 :days 180 :occurrences 2 :decor 10 :scad 10)
  (con1 :id 2103 :days 180 :occurrences 3 :decor 10 :scad 10 :null 1))


;; (defdb 
;;   (tl-forall i (tl-range 1 10000)
;;     (tl-exists (wl white-list) 
;;         (:id i :id-elemento-white (* 2 i) :ultimo-agg (tl-timestamp (get-universal-time)) :tags nil :flg-white-list "s" :tipo-white (tl-oneof (list "soggetto" "targa")))
;;       )))




;; (pprint *database*)

