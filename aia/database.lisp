(in-package :backgen)
(defun uniq (&rest inds)
  ;; (read-from-string (apply #'mkstr inds))
  (loop for i from 0 to (- (length inds) 1) 
     summing (* (expt 10000 (- (length inds) i 1)) (nth i inds)) into result 
     ;; summing (nth i inds) into result 
     finally (return result)))

;; (defmacro bool-entry (n fname name val)
;;   `(tl-forall i (tl-range ,n ,n)
;;      (tl-exists (entry stdlib-entries)
;;          (:stdlib-entry-id ,n :name ,(format nil "~a" (lower fname "")) :type "boolean" :body ,(format nil "function ~a(soggetto,sinistro,strict) {if (strict) { return \"(~a = ''~a'')\"; } else { return \"(~a = ''~a'' OR ~a IS NULL)\"; }}" (lower fname "") (upper name) (lower val) (upper name) (lower val) (upper name)))
;;        (tl-exists (par stdlib-entry-parameters) (:stdlib-entry-parameter-id (uniq i 1) :stdlib-entry-id ,n :name "soggetto" :type "soggetto"))
;;        (tl-exists (par stdlib-entry-parameters) (:stdlib-entry-parameter-id (uniq i 2) :stdlib-entry-id ,n :name "sinistro" :type "string")))))

;; (defmacro op-entry (n fname op)
;;   `(tl-forall i (tl-range ,n ,n)
;;      (tl-exists (entry stdlib-entries)
;;          (:stdlib-entry-id ,n :name  ,(format nil "~a" (lower fname "")) :type "string" :body,(format nil "function ~a(op1,op2,strict)
;; {if (strict) { return \"(\" + op1 + \" ~a \" + op2 + \"); } else { return \"((\" + op1 + \" ~a \" + op2 + \") OR (\" + op1 + \"IS NULL) OR (\" + op2 + \"IS NULL))\"; }}" (lower fname "") op op))

;;        (tl-exists (par stdlib-entry-parameters)
;;            (:stdlib-entry-parameter-id (uniq i 1) :stdlib-entry-id ,n :name "op1" :type "null"))
;;        (tl-exists (par stdlib-entry-parameters) (:stdlib-entry-parameter-id (uniq i 2) :stdlib-entry-id ,n :name "op2" :type "null")))))


(defun tl-oneof (&rest values)
  (nth (random (length values)) values))

;; (eval-when (:compile-toplevel :load-toplevel :execute)
;;   (defun tl-oneof (values)
;;     (nth (random (length values)) values)))


;; (eval-when (:compile-toplevel :load-toplevel :execute)
;;   (defun tl-someof (flags n val)
;;     (if (eql n 0)
;;         nil 
;;         (let ((flag (tl-oneof flags)))
;;           (apply #'list flag val (tl-someof (remove flag flags) (- n 1) val))))))


(defun lify (value)
  (cond ((numberp value) value)
        ((equal "1" value) "1")
        ((equal "0" value) "0")
        ((listp value) (car value))
        ((t (error "value ~a not well typed" value)))))

(defun flatten-db (db)
  (let ((tables (remove-duplicates (mapcar #'car db))))
    (values-list (mapcar (lambda (table)
                           (mapcar (lambda (plst)
                                     (apply #'append (mapcar (lambda (pair)
                                                               (list (car pair) (lify (cadr pair))))
                                                             (group plst 2)))) 
                                   (mapcar #'cadr 
                                           (remove-if-not (lambda (elem) 
                                                            (eql (car elem) table))
                                                          db))))
                         tables))))

(defmacro coinvolto-diretto (strict)
  `(or (coinvolto ,strict)
       (leso ,strict)
       (richiedente ,strict)
       (proprietario ,strict)
       (contraente ,strict)
       (deceduto ,strict)
       (testimone ,strict)
       (responsabile ,strict)))

(defun random-sogg (&key id days (lesi 0) (delay) (fgvs 0) occurrences (decorr 0) (scad 0) (nveic 0) (date (get-universal-time)))
  (labels ((sini (start end)
             (tl-forall i (tl-range start end)
               (let* ((data-accad (* 86400 (floor (random-date  (- date (* days 86400)) date) 86400)))
                      (data-denun (* 86400 (floor (random-date data-accad (+ data-accad (* delay 86400))) 86400))))
                 (tl-exists (sini gv-ind-stat-sini) 
                     (:id-sini (uniq id i) :d-data-accad (tl-timestamp data-accad)
                               :d-data-denun (tl-timestamp data-denun)
                               :m-num-lesi (random-number 0 lesi))
                   (tl-exists (sogg gv-ind-stat-sogg-sini) 
                       (:id-sini (tl-retrieve :id-sini sini) :id-sogg id 
                                 :d-flg-contraente (tl-oneof nil "0" "1")
                                 :d-flg-conducente (tl-oneof nil "0" "1")
                                 :d-flg-richiedente (tl-oneof nil "0" "1")
                                 :d-flg-perito (tl-oneof nil "0" "1")
                                 :d-flg-chk-perito (tl-oneof nil "0" "1")
                                 :d-flg-trasportato (tl-oneof nil "0" "1")
                                 :d-flg-pedone (tl-oneof nil "0" "1")
                                 :d-flg-leso (tl-oneof nil "0" "1")
                                 :d-flg-deceduto (tl-oneof nil "0" "1")
                         
                                 :d-flg-medico (tl-oneof nil "0" "1")
                                 :d-flg-legale (tl-oneof nil "0" "1")
                                 :d-flg-carrozziere (tl-oneof nil "0" "1")
                                 :d-flg-respons (tl-oneof nil "0" "1")
                                 :d-flg-beneficiario (tl-oneof nil "0" "1")
                                 :d-flg-patente-invalida (tl-oneof nil "0" "1")
                                 :m-num-rich-fgvs (random-number 0 fgvs)
                                 :m-gg-a-scadenza (random-number 0 scad)
                                 :m-gg-da-decorrenza (random-number 0 decorr)
                                 :m-num-veic (random-number 0 nveic)
                                 :d-flg-testimone (tl-oneof nil "0" "1")))))))) 
    (let* ((data-accad (* 86400 (floor (random-date  (- date (* days 86400)) date) 86400)))
           (data-denun (* 86400 (floor (random-date  data-accad (+ data-accad (* delay 86400))) 86400))))
      (tl-exists (sini gv-ind-stat-sini) 
          (:id-sini id :d-data-accad (tl-timestamp data-accad)
                    :d-data-denun (tl-timestamp data-denun)
                    :m-num-lesi (random-number 0 lesi))
        (tl-exists (sogg gv-ind-stat-sogg-sini) 
            (:id-sini id :id-sogg id 
                      :d-flg-contraente (tl-oneof nil "0" "1")
                      :d-flg-perito (tl-oneof nil "0" "1")
                      :d-flg-chk-perito (tl-oneof nil "0" "1")
                      :d-flg-richiedente (tl-oneof nil "0" "1")
                      :d-flg-trasportato (tl-oneof nil "0" "1")
                      :d-flg-pedone (tl-oneof nil "0" "1")
                      :d-flg-leso (tl-oneof nil "0" "1")
                      :d-flg-deceduto (tl-oneof nil "0" "1")
                      
                      :d-flg-medico (tl-oneof nil "0" "1")
                      :d-flg-legale (tl-oneof nil "0" "1")
                      :d-flg-carrozziere (tl-oneof nil "0" "1")
                      :d-flg-respons (tl-oneof nil "0" "1")
                      :d-flg-beneficiario (tl-oneof nil "0" "1")
                      :d-flg-conducente (tl-oneof nil "0" "1")
                      :d-flg-patente-invalida (tl-oneof nil "0" "1")
                      :m-num-rich-fgvs (random-number 0 fgvs)
                      :m-gg-a-scadenza (random-number 0 scad)
                      :m-gg-da-decorrenza (random-number 0 decorr)
                      :m-num-veic (random-number 0 nveic)
                      :d-flg-testimone (tl-oneof nil "0" "1")))
        (sini 1 occurrences)))))

(defun random-veic (&key id days (lesi 0) (delay) (fgvs 0) (immatr 0) (incoer 0) occurrences (date (get-universal-time)))
  (labels ((sini (start end &optional val)
             (tl-forall i (tl-range start end)
               (let* ((data-accad (* 86400 (floor (random-date (- date (* days 86400)) date) 86400)))
                      (data-denun (* 86400 (floor (random-date data-accad (+ data-accad (* delay 86400))) 86400)))) 
                 (tl-exists (sini gv-ind-stat-sini) 
                     (:id-sini (uniq id i) :d-data-accad (tl-timestamp data-accad)
                               :d-data-denun (tl-timestamp data-denun)
                               :m-num-lesi (random-number 0 lesi))
                   (tl-exists (veic gv-ind-stat-trg-veic-sini) 
                       (:id-sini (tl-retrieve :id-sini sini) :id-targa id
                         
                                 :m-num-rich-fgvs (random-number 0 fgvs)
                                 
                                 
                                 :d-flg-veic-fermo-admin (tl-oneof nil "0" "1")
                                 :d-flg-targa-incoerente (tl-oneof nil "0" "1")
                                 :d-flg-targa-inesistente (tl-oneof nil "0" "1")
                                 :m-anni-immatr (tl-oneof (random-number 0 immatr) nil)
                                 :m-num-incoerenze (tl-oneof (random-number 0 incoer) nil)))))))) 
    (let* ((data-accad (* 86400 (floor (random-date (- date (* days 86400)) date) 86400)))
           (data-denun (* 86400 (floor (random-date data-accad (+ data-accad (* delay 86400))) 86400)))) 
      (tl-exists (sini gv-ind-stat-sini) 
          (:id-sini id :d-data-accad (tl-timestamp data-accad)
                    :d-data-denun (tl-timestamp data-denun)
                    :m-num-lesi (random-number 0 lesi))
        (tl-exists (veic gv-ind-stat-trg-veic-sini) 
            (:id-sini id :id-targa id
              
                      :m-num-rich-fgvs (random-number 0 fgvs)
                     

                      :d-flg-veic-fermo-admin (tl-oneof nil "0" "1")
                      :d-flg-targa-incoerente (tl-oneof nil "0" "1")
                      :d-flg-targa-inesistente (tl-oneof nil "0" "1")
                      :m-anni-immatr (tl-oneof (random-number 0 immatr) nil)
                      :m-num-incoerenze (tl-oneof (random-number 0 incoer) nil)))
        (sini 1 occurrences)))))

(indicatore test-sco1 (sinistro soggetto) (durata occorrenze)
  (cond ((ind-eq (cluster (sinistri-soggetto sinistro soggetto (coinvolto-diretto t))
                      durata sinistro)
             occorrenze) (values t t))
        ((not (ind-eq (cluster (sinistri-soggetto sinistro soggetto (coinvolto-diretto nil)) 
                           durata sinistro)
                  occorrenze)) (values nil t))
        (t (values nil nil))))

(indicatore test-sco2 (sinistro soggetto) (durata occorrenze)
  (cond ((ind-ge (cluster (sinistri-soggetto sinistro soggetto (coinvolto-diretto t))
                      durata sinistro)
             occorrenze) (values t t))
        ((not (ind-ge (cluster (sinistri-soggetto sinistro soggetto (coinvolto-diretto nil)) 
                           durata sinistro)
                  occorrenze)) (values nil t))
        (t (values nil nil))))

(indicatore test-sco3 (sinistro soggetto) (durata lesi occorrenze)
  (cond ((ind-ge (cluster (sinistri-soggetto sinistro soggetto (and (ind-ge (numerolesi t) lesi)
                                              (coinvolto-diretto t)))
                      durata sinistro)
             occorrenze) (values t t))
        ((not (ind-ge (cluster (sinistri-soggetto sinistro soggetto (and (ind-ge (numerolesi nil) lesi)
                                              (coinvolto-diretto nil))) 
                           durata sinistro)
                  occorrenze)) (values nil t))
        (t (values nil nil))))

;; (indicatore test-sco4 (sinistro soggetto) (durata ritardo occorrenze)
;;   (cond ((ind-ge (let ((clu (cluster (sinistri-soggetto sinistro soggetto (and (ind-ge (let ((val (ind-minus (datadenuncia t 86400) (dataaccadimento t 86400))))
;;                                                                                          (pprint `(case strict ,sinistro ,soggetto ,val)) val) ritardo)
;;                                                                                (coinvolto-diretto t)))
;;                                      durata)))
;;                    (pprint clu)
;;                    clu) 
;;                  occorrenze) (values t t))
;;         ((not (ind-ge (cluster (sinistri-soggetto sinistro soggetto (and (ind-ge (let ((val (ind-minus (datadenuncia nil 86400) (dataaccadimento nil 86400))))
;;                                                                                    (pprint `(case loose ,sinistro ,soggetto ,val))
;;                                                                                    val)

;;                                                                                  ;; (ind-minus (datadenuncia nil 86400) (dataaccadimento nil 86400))
;;                                                                                  ritardo)
;;                                                                          (coinvolto-diretto nil))) 
;;                                durata)
;;                       occorrenze)) (values nil t))
;;         (t (values nil nil))))

(indicatore test-sco4 (sinistro soggetto) (durata ritardo occorrenze)
  (cond ((ind-eq (cluster (sinistri-soggetto sinistro soggetto (and (ind-ge (ind-minus (datadenuncia t 86400) (dataaccadimento t 86400)) ritardo)
                                                                    (coinvolto-diretto t)))
                          durata sinistro) 
                 occorrenze) (values t t))
        ((not (ind-eq (cluster (sinistri-soggetto sinistro soggetto (and (ind-ge (ind-minus (datadenuncia nil 86400) (dataaccadimento nil 86400)) ritardo)
                                                                         (coinvolto-diretto nil))) 
                               durata sinistro)
                      occorrenze)) (values nil t))
        (t (values nil nil))))

(indicatore test-sco5 (sinistro soggetto) (durata ritardo occorrenze)
  (cond ((ind-ge (cluster (sinistri-soggetto sinistro soggetto (and (ind-ge (ind-minus (datadenuncia t 86400) (dataaccadimento t 86400)) ritardo)
                                                                    (coinvolto-diretto t)))
                          durata sinistro) 
                 occorrenze) (values t t))
        ((not (ind-ge (cluster (sinistri-soggetto sinistro soggetto (and (ind-ge (ind-minus (datadenuncia nil 86400) (dataaccadimento nil 86400)) ritardo)
                                                                         (coinvolto-diretto nil))) 
                               durata sinistro)
                      occorrenze)) (values nil t))
        (t (values nil nil))))



(indicatore test-sco6 (sinistro soggetto) (durata occorrenze)
  (cond ((ind-ge (cluster (sinistri-soggetto sinistro soggetto (testimone t))
                          durata sinistro)
                 occorrenze) (values t t))
        ((not (ind-ge (cluster (sinistri-soggetto sinistro soggetto (testimone nil)) 
                               durata sinistro)
                      occorrenze)) (values nil t))
        (t (values nil nil))))

(indicatore test-sco7 (sinistro soggetto) ()
            (cond ((and (ind-match (car (field-values (soggetti sinistro soggetto) :d-flg-conducente)) "1")
                        (ind-match (car (field-values (soggetti sinistro soggetto) :d-flg-patente-invalida)) "1")) (values t t)) 
                  ((not (or (and (ind-match (car (field-values (soggetti sinistro soggetto) :d-flg-conducente)) "1")
                                 (ind-match (car (field-values (soggetti sinistro soggetto) :d-flg-patente-invalida)) "1"))
                            (null (car (field-values (soggetti sinistro soggetto) :d-flg-conducente)))
                            (null (car (field-values (soggetti sinistro soggetto) :d-flg-patente-invalida))))) (values nil t))
                  (t (values nil nil))))

(indicatore test-sco8 (sinistro soggetto) (durata occorrenze)
  (cond ((ind-ge (cluster (sinistri-soggetto sinistro soggetto (leso t))
                          durata sinistro)
                 occorrenze) (values t t))
        ((not (ind-ge (cluster (sinistri-soggetto sinistro soggetto (leso nil)) 
                               durata sinistro)
                      occorrenze)) (values nil t))
        (t (values nil nil))))

(indicatore test-sco9 (sinistro soggetto) (durata occorrenze)
  (cond ((ind-ge (cluster (sinistri-soggetto sinistro soggetto (and (ind-gt (numerofgvs t) 0)
                                                                    (coinvolto-diretto t)))
                          durata sinistro)
                 occorrenze) (values t t))
        ((not (ind-ge (cluster (sinistri-soggetto sinistro soggetto (and (ind-gt (numerofgvs nil) 0)
                                                                         (coinvolto-diretto t))) 
                               durata sinistro)
                      occorrenze)) (values nil t))
        (t (values nil nil))))

(indicatore test-sco10 (sinistro soggetto) (soglia)
  (cond ((and (ind-match (car (field-values (soggetti sinistro soggetto) :d-tipo-sogg)) "p")
              (ind-match (car (field-values (soggetti sinistro soggetto) :d-flg-proprietario)) "1")
              (ind-ge (car (field-values (soggetti sinistro soggetto) :m-num-veic)) soglia)) (values t t)) 
        ((not (or (and (ind-match (car (field-values (soggetti sinistro soggetto) :d-tipo-sogg)) "p")
                       (ind-match (car (field-values (soggetti sinistro soggetto) :d-flg-proprietario)) "1")
                       (ind-ge (car (field-values (soggetti sinistro soggetto) :m-num-veic)) soglia))
                  (null (car (field-values (soggetti sinistro soggetto) :d-tipo-sogg)))
                  (null (car (field-values (soggetti sinistro soggetto) :d-flg-properietario)))
                  (null (car (field-values (soggetti sinistro soggetto) :m-num-veic))))) (values nil t))
        (t (values nil nil))))

(indicatore test-con1 (sinistro soggetto) (durata intdecorr intscad occorrenze)
  (cond ((ind-ge (cluster (sinistri-soggetto sinistro soggetto 
                                             (and (contraente t)
                                                  (or (ind-le (giornidecorr t) intdecorr)
                                                      (ind-le (giorniscad t) intscad))))
                          durata sinistro)
                 occorrenze) (values t t)) 
        ((not (ind-ge (cluster (sinistri-soggetto sinistro soggetto 
                                                  (and (contraente nil)
                                                       (or (or (ind-le (giornidecorr t) intdecorr) (null (getf row :m-gg-da-decorrenza)))
                                                           (or (ind-le (giorniscad t) intscad) (null (getf row :m-gg-a-scadenza))))))
                               durata sinistro)
                      occorrenze)) (values nil t))
        (t (values nil nil))))

(indicatore test-sin1 (sinistro soggetto) ()
            (cond ((and (ind-match (car (field-values (soggetti sinistro soggetto) :d-flg-perito)) "1")
                        (ind-match (car (field-values (soggetti sinistro soggetto) :d-flg-chk-perito)) "0")) (values t t)) 
                  ((not (or (and (ind-match (car (field-values (soggetti sinistro soggetto) :d-flg-perito)) "1")
                                 (ind-match (car (field-values (soggetti sinistro soggetto) :d-flg-chk-perito)) "0"))
                            (null (car (field-values (soggetti sinistro soggetto) :d-flg-perito)))
                            (null (car (field-values (soggetti sinistro soggetto) :d-flg-chk-perito))))) (values nil t))
                  (t (values nil nil))))

(indicatore test-vei1 (sinistro veicolo) (durata occorrenze)
  (cond ((ind-eq (cluster (sinistri-veicolo sinistro veicolo)
                          durata sinistro)
                 occorrenze) (values t t))
        ((not (ind-eq (cluster (sinistri-veicolo sinistro veicolo) 
                               durata sinistro)
                      occorrenze)) (values nil t))
        (t (values nil nil))))

(indicatore test-vei2 (sinistro veicolo) (durata occorrenze)
  (cond ((ind-ge (cluster (sinistri-veicolo sinistro veicolo)
                          durata sinistro)
                 occorrenze) (values t t))
        ((not (ind-ge (cluster (sinistri-veicolo sinistro veicolo) 
                               durata sinistro)
                      occorrenze)) (values nil t))
        (t (values nil nil))))

(indicatore test-vei3 (sinistro veicolo) (durata lesi occorrenze)
  (cond ((ind-ge (cluster (sinistri-veicolo sinistro veicolo (and (ind-ge (numerolesi t) lesi)))
                      durata sinistro)
             occorrenze) (values t t))
        ((not (ind-ge (cluster (sinistri-veicolo sinistro veicolo (and (ind-ge (numerolesi nil) lesi))) 
                           durata sinistro)
                  occorrenze)) (values nil t))
        (t (values nil nil))))


(indicatore test-vei4 (sinistro veicolo) (durata ritardo occorrenze)
  (cond ((ind-ge (cluster (sinistri-veicolo sinistro veicolo (and (ind-gt (ind-minus (datadenuncia t 86400) (dataaccadimento t 86400)) ritardo)))
                          durata sinistro)
                 occorrenze) (values t t))
        ((not (ind-ge (cluster (sinistri-veicolo sinistro veicolo (and (ind-gt (ind-minus (datadenuncia nil 86400) (dataaccadimento nil 86400)) ritardo))) 
                               durata sinistro)
                      occorrenze)) (values nil t))
        (t (values nil nil))))

(indicatore test-vei5 (sinistro veicolo) (durata occorrenze)
  (cond ((ind-ge (cluster (sinistri-veicolo sinistro veicolo (and (ind-gt (numerofgvs t) 0)))
                          durata sinistro)
                 occorrenze) (values t t))
        ((not (ind-ge (cluster (sinistri-veicolo sinistro veicolo (and (ind-gt (numerofgvs nil) 0))) 
                               durata sinistro)
                      occorrenze)) (values nil t))
        (t (values nil nil))))

(indicatore test-vei6 (sinistro veicolo) ()
  (cond ((ind-match (car (field-values (veicoli sinistro veicolo) :d-flg-targa-incoerente)) "1") (values t t))
        ((not (or (ind-match (car (field-values (veicoli sinistro veicolo) :d-flg-targa-incoerente)) "1")
                  (null (car (field-values (veicoli sinistro veicolo) :d-flg-targa-incoerente))))) (values nil t))
        (t (values nil nil))))


(indicatore test-vei7 (sinistro veicolo) ()
  (cond ((ind-match (car (field-values (veicoli sinistro veicolo) :d-flg-targa-inesistente)) "1") (values t t))
        ((not (or (ind-match (car (field-values (veicoli sinistro veicolo) :d-flg-targa-inesistente)) "1")
                  (null (car (field-values (veicoli sinistro veicolo) :d-flg-targa-inesistente))))) (values nil t))
        (t (values nil nil))))

(indicatore test-vei8 (sinistro veicolo) (soglia)
  (cond ((ind-ge (car (field-values (veicoli sinistro veicolo) :m-anni-immatr)) soglia) (values t t))
        ((not (or (ind-ge (car (field-values (veicoli sinistro veicolo) :m-anni-immatr)) soglia)
                  (null (car (field-values (veicoli sinistro veicolo) :m-anni-immatr))))) (values nil t))
        (t (values nil nil))))

(indicatore test-vei9 (sinistro veicolo) (durata occorrenze)
  (cond ((ind-ge (cluster (sinistri-veicolo sinistro veicolo (ind-gt (numeroincoerenzeveicolo t) 0))
                          durata sinistro)
                 occorrenze) (values t t))
        ((not (ind-ge (cluster (sinistri-veicolo sinistro veicolo (or (ind-gt (numeroincoerenzeveicolo nil) 0)
                                                                      (null (numeroincoerenzeveicolo nil)))) 
                               durata sinistro)
                      occorrenze)) (values nil t))
        (t (values nil nil))))
;; (let ((db (random-sogg :id 1 :days 180 :occurr2ences (1+ (random 4))))) 
;;   (pprint db)
;;   (pprint (multiple-value-list (flatten-db db))))
;; (defmacro test-ind-sogg (id-ind id-sini id-sogg name &rest args)
;;   `(tl-exists (out test-results) 
;;               (:id-sogg ,id-sogg :id-sini ,id-sini :id-ind ,id-ind :expected 
;;                         (multiple-value-bind (res found) 
;;                             (,name ,id-sini ,id-sogg ,@args) 
;;                           (if found (if res "1" "0"))))))

(defmacro test-ind-sogg (id-ind id-sini id-sogg name &rest args)
  (let ((result (gensym)))
    `(let ((,result (multiple-value-bind (res found) 
                        (,name ,id-sini ,id-sogg ,@args) 
                      (if found (if res "1" "0")))))
       (values (tl-exists (out test-results) 
                                  (:id-sogg ,id-sogg :id-sini ,id-sini :id-ind ,id-ind :expected 
                                            ,result)) ,result))))

(defmacro test-ind-veic (id-ind id-sini id-veic name &rest args)
  (let ((result (gensym)))
    `(let ((,result (multiple-value-bind (res found) 
                        (,name ,id-sini ,id-veic ,@args) 
                      (if found (if res "1" "0")))))
       (values (tl-exists (out test-results) 
                          (:id-targa ,id-veic :id-sini ,id-sini :id-ind ,id-ind :expected 
                                     ,result)) ,result))))

(defun split (lst)
  (loop for elem in lst
       collecting (car elem) into first
       collecting (cadr elem) into second
       finally (return (list first second))))


;; (let ((db (tl-))))

(let* ((*random-state* (make-random-state (my-random-state)))
       (len 10)
       (filename "D:/Dati/Profili/m026980/workspace/app/src/main/resources/data.sql")
       (sogg-res (apply #'append 
                        (loop for i from 1001 to (+ 1000 len) collect
                             (let ((db (random-sogg :date (+ (* 910 86400) (get-universal-time)) :id i :days 1825 :occurrences (1+ (random 6)) :lesi 5 :delay 30 :decorr 20 :scad 20)))
                               (with-multiple-value-bindings
                                   (((*sinistri-table* *soggetti-table*) (flatten-db db))
                                    ((sco1-val sco1-exp) (test-ind-sogg 1 i i test-sco1 365 3))
                                    ((sco2-val sco2-exp) (test-ind-sogg 2 i i test-sco2 365 4))
                                    ((sco3-val sco3-exp) (test-ind-sogg 3 i i test-sco3 1095 3 2))
                                    ((sco4-val sco4-exp) (test-ind-sogg 4 i i test-sco4 1095 180 2))
                                    ((sco5-val sco5-exp) (test-ind-sogg 5 i i test-sco5 1095 180 3))
                                    ((sco6-val sco6-exp) (test-ind-sogg 6 i i test-sco6 1825 3))
                                    ((sco7-val sco7-exp) (test-ind-sogg 7 i i test-sco7))
                                    ((sco8-val sco8-exp) (test-ind-sogg 8 i i test-sco8 1095 1))
                                    ((sco9-val sco9-exp) (test-ind-sogg 9 i i test-sco9 1825 2))
                                    ((sco10-val sco10-exp) (test-ind-sogg 10 i i test-sco10 6))
                                    ((con1-val con1-exp) (test-ind-sogg 21 i i test-con1 1095 15 15 2))
                                    ((sin1-val sin1-exp) (test-ind-sogg 22 i i test-sin1))
                                    )
                                 ;; (pprint (cluster (sinistri-soggetto i i (testimone t))
                                 ;;                  180 i))
                                 ;; (tl-and db)
                                 ;; (pprint sco1-exp)
                                 (tl-and db sco1-val sco2-val sco3-val sco4-val sco5-val sco6-val sco7-val sco8-val sco9-val sco10-val con1-val sin1-val)
                                 )))))
       (veic-res (apply #'append (loop for i from 1000001 to (+ 1000000 len) collect
                                      (let ((db (random-veic :id i :days 180 :occurrences (1+ (random 6)) :lesi 50 :delay 20 :fgvs 3 :immatr 10 :incoer 1)))
                                        (multiple-value-bind (*sinistri-table* *veicoli-table*) 
                                            (flatten-db db)
                                          ;; (pprint *veicoli-table*)
                                          ;; (pprint `(case ,i))
                                          ;; (pprint (sinistri-veicolo i i (or (ind-gt (numeroincoerenzeveicolo nil) 0)
                                          ;;                                   (null (numeroincoerenzeveicolo nil)))))
                                          ;; (pprint (multiple-value-list (test-vei9 i i 180 2)))
                                          ;; (pprint (veicoli i i))
                                          (tl-and db
                                                  (test-ind-veic 11 i i test-vei1 365 3)
                                                  (test-ind-veic 12 i i test-vei2 365 4)
                                                  (test-ind-veic 13 i i test-vei3 1095 3 2)
                                                  (test-ind-veic 14 i i test-vei4 1095 180 2)
                                                  (test-ind-veic 15 i i test-vei5 1825 2)
                                                  (test-ind-veic 16 i i test-vei6)
                                                  (test-ind-veic 17 i i test-vei7)
                                                  (test-ind-veic 18 i i test-vei8 16)
                                                  (test-ind-veic 19 i i test-vei9 1825 1))))))))
  (pprint filename)
  ;; (pprint sogg-res)
  (write-file filename (tl-ddl (tl-and sogg-res veic-res))))

(defun column (n matrix)
  (loop for i from 0 to (- (length matrix) 1) collect (nth n (coerce (nth i matrix) 'list))))

(defun maxnil (&rest args)
  (reduce (lambda (acc val) (if acc
                                (if val (max acc val)
                                    acc)
                                val))
          args))
;; (pprint (maxnil nil 0 1 nil))

(defun score (vals weights)
  (reduce (lambda (acc pair) (+ acc (* (if (null (car pair))
                                           0 
                                           (car pair))
                                       (cadr pair)))) 
          (mapcar #'list vals weights)
          :initial-value 0))

;; (pprint (score (list 1 2 nil) (list 1 2 3)))

;; (let ((test (loop repeat 5 collect (loop repeat 12 collect (tl-oneof 0 1 nil))))) (pprint test) (pprint (column 1 test)))

(let* ((*random-state* (make-random-state (my-random-state)))
       (filename "D:/Dati/Profili/m026980/workspace/app/src/main/resources/data2.sql")
       (db (let* ((nsogg 10)
                  (nveic 10)
                  (id-sogg-ind (list 1 2 3 4 5 6 7 8 9 10 21 22))
                  (id-veic-ind (list 11 12 13 14 15 16 17 18 19 20))
                  ;; (ind-sogg-sini-vals (loop for i from 0 to (- (length id-sogg-ind) 1)
                  ;;                          (apply #'maxnil (column i ind-sogg))))
                  ;; (ind-veic-sini-vals (loop for i from 0 to (- (length id-veic-ind) 1)
                  ;;                          (apply #'maxnil (column i ind-veic))))
                  )
             (tl-forall sini (tl-range 1 10)
               (let ((ind-sogg (loop repeat nsogg collect (loop repeat 12 collect (tl-oneof 0 1 nil))))
                     (ind-veic (loop repeat nveic collect (loop repeat 10 collect (tl-oneof 0 1 nil))))) 
                 ;; (terpri)
                 ;; (format t "~{~4a~^ ~}~%" id-sogg-ind)                 ;; (format t "~{~4a~^ ~}~%" (nth 0 ind-sogg))
                 ;; (format t "~{~4a~^ ~}~%" (nth 1 ind-sogg))
                                        ;soggetti
                 (tl-and
                   (tl-forall sini-sogg (tl-range 0 (- nsogg 1))
                     (tl-forall sini-sogg-ind (mapcar #'list id-sogg-ind (nth sini-sogg ind-sogg)) 
                       (tl-exists (rsogg dwh-ind-risc-sogg)
                           (:id (uniq sini sini-sogg (car sini-sogg-ind)) :id-sini sini :id-sogg (uniq sini sini-sogg) :id-indicatore (car sini-sogg-ind) :val-indicatore (cadr sini-sogg-ind) :ultimo-agg (tl-timestamp (random-date 0 0)) :id-process 201710241528 )))
                          
                     (tl-exists (ssogg score-sogg)
                         (:id-sini sini :id-sogg (uniq sini sini-sogg) :score (score (nth sini-sogg ind-sogg) 
                                                                                     (mapcar (lambda (v) (expt 2 v))
                                                                                             (mapcar (lambda (v) (- v 1))
                                                                                                     id-sogg-ind))))))
                        
                   (tl-forall sini-ind (mapcar #'list id-sogg-ind (tl-range 0 (- (length id-sogg-ind) 1))) 
                     (tl-exists (rsini ind-risc-sini)
                         (:id-sini sini :id-indicatore (car sini-ind) :val-indicatore (apply #'maxnil (column (cadr sini-ind) ind-sogg)))))
                        
                                        ;veicoli
                   (tl-forall sini-veic (tl-range 0 (- nveic 1))
                     (tl-forall sini-veic-ind (mapcar #'list id-veic-ind (nth sini-veic ind-veic)) 
                       (tl-exists (rveic dwh-ind-risc-trg-veic)
                           (:id (uniq sini sini-veic (car sini-veic-ind)) :id-sini sini :id-veic (uniq sini sini-veic) :id-indicatore (car sini-veic-ind) :val-indicatore (cadr sini-veic-ind) :ultimo-agg (tl-timestamp (random-date 0 0)))))
                     (tl-exists (sveic score-trg-veic)
                         (:id-sini sini :id-veic (uniq sini sini-veic) :score (score (nth sini-veic ind-veic) 
                                                                                     (mapcar (lambda (v) (expt 2 v))
                                                                                             (mapcar (lambda (v) (- v 1))
                                                                                                     id-veic-ind))))))
                   (tl-forall sini-ind (mapcar #'list id-veic-ind (tl-range 0 (- (length id-veic-ind) 1))) 
                     (tl-exists (rsini ind-risc-sini)
                         (:id-sini sini :id-indicatore (car sini-ind) :val-indicatore (apply #'maxnil (column (cadr sini-ind) ind-veic)))))

                   ;; (tl-exists (ssini score-sini)
                   ;;     (:id-sini sini :score (format nil "~b" 
                   ;;                                   (score (nth sini-sogg ind-sogg) 
                   ;;                                          (mapcar (lambda (v) (expt 2 v))
                   ;;                                                  (mapcar (lambda (v) (- v 1))
                   ;;                                                          id-sogg-ind))))))
                   ))))))
  (pprint filename)
  (write-file filename (tl-ddl db)))

