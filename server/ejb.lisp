(in-package :server)

(defparameter *ejbs* (make-hash-table))
(defmacro defejb (name &rest methods)
  `(progn (defparameter ,name (ejb ,@methods)) 
         (setf (gethash ',name *ejbs*) ,name)))

(defprim stateless-ejb (name &key daos methods)
  (:pretty () (list 'stateless-ejb (list :name name :daos (synth-all :pretty daos) :methods (synth-all :pretty methods))))
  (:req () (synth-all :req methods))
  (:name () (symb (synth :name entity) "-E-J-B"))
  (:ejb (package) (let ((bean-name (synth :name this)))
                    (java-unit bean-name
                               (java-package (symb package '|.ejb|))
                               (java-import '|javax.ejb| '|EJB| '|Stateless| '|LocalBean|)
                               (java-import '|javax.persistence| '|EntityManager| '|PersistenceContext|)
                               (java-import '|javax.inject| '|Inject|)
                               (java-import (symb package '|.dto|) '|*|) 
                               (java-import (symb package '|.dao|) '|*|) 
                               (java-import (symb package '|.vo|) '|*|) 
                               (java-import (symb package '|.model|) '|*|)
                               (java-import (symb package '|.exception|) '|*|)
                               (java-import '|java.util| '|List|)
                               (java-import '|java.util| '|Arrays|)
                               (java-with-annotations 
                                (list (java-annotation '|Stateless|)
                                      (java-annotation '|LocalBean|))
                                (java-class bean-name 
                                            :public t
                                            ;; :interfaces (list (symb name "-BEAN"))
                                            :constructors (list (java-constructor name nil))
                                            :fields (apply #'list (java-with-annotations (list (java-annotation '|PersistenceContext|))
                                                                                         (java-statement (java-pair 'entity-manager (java-type 'entity-manager) :private t))) 
                                                           (mapcar (lambda (dao)
                                                                     (let ((dao-name (symb (synth :name dao) "-D-A-O")))
                                                                       (java-with-annotations (list (java-annotation '|Inject|))
                                                                                              (java-statement (java-pair dao-name (java-object-type dao-name) :private t)))))
                                                                   daos))
                                            :methods (synth-all :java-implementation methods)))))))
;; (defprim ejb-parameter (name type)
;;   (:pretty () (list 'ejb-parameter (list :name name :type (synth :pretty type))))
;;   (:java-implementation () (java-pair name type)))

(defprim ejb-method (name parameters logic)
  (:pretty () (list 'ejb-method (list :name name :parameters (synth-all :pretty parameters) :logic (synth :pretty logic))))
  (:java-implementation () (java-method (lower-camel name)
                                   parameters 
                                   (synth :java-type (synth :type logic))
                                   :throws (synth-all :type (synth :errors logic))
                                   (synth :java-implementation logic (lambda (x) (java-return x))))))

(defun generate-ejb (service)
  (stateless-ejb (symb (synth :name service) "-E-J-B")
                 :daos (apply #'append (synth-all :entities (synth-all :action (apply #'append (synth-all :actions (synth :resources service))))))
                 :methods (apply #'append (synth-all :ejb-methods (synth :resources service) (synth :url service)))))
